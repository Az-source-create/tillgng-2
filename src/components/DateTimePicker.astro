---
interface Props {
  id: string;
  label?: string;
  name?: string;
  initialDate?: Date;
  min?: string; // Format: YYYY-MM-DDThh:mm
  max?: string; // Format: YYYY-MM-DDThh:mm
  required?: boolean;
}

const { 
  id, 
  label = '', 
  name = id, 
  initialDate = new Date(),
  min,
  max,
  required = false
} = Astro.props;

// Format initial date for the input
const formatDateForInput = (date: Date) => {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  
  return `${day}-${month}-${year}T${hours}:${minutes}`;
};

const initialValue = formatDateForInput(initialDate);
---

<div class="datetime-picker">
  {label && <label for={id}>{label}</label>}
  <input 
    type="datetime-local" 
    id={id} 
    name={name}
    value={initialValue}
    min={min}
    max={max}
    required={required}
  />
  <div class="formatted-date" id={`${id}-formatted`}>
    <span class="formatted-date-icon">ðŸ—“</span>
    <span class="formatted-date-text"></span>
  </div>
</div>

<style>
  .datetime-picker {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    margin-bottom: 1.5rem;
  }
  
  .datetime-picker label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #111827;
  }
  
  .datetime-picker input {
    display: block;
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    background: #f9fafb;
    font-size: 1rem;
    color: #111827;
    appearance: none;
    -webkit-appearance: none;
  }
  
  .datetime-picker input:focus {
    outline: 2px solid #4f46e5;
    border-color: transparent;
  }
  
  .formatted-date {
    margin-top: 0.75rem;
    font-size: 1.1rem;
    color: #4f46e5;
    font-weight: 500;
    padding: 0.75rem;
    background-color: #eef2ff;
    border-radius: 6px;
    border-left: 3px solid #4f46e5;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }
  
  /* Highlight animation when date changes */
  @keyframes highlight-pulse {
    0% { background-color: #eef2ff; }
    50% { background-color: #c7d2fe; }
    100% { background-color: #eef2ff; }
  }
  
  .formatted-date.highlight {
    animation: highlight-pulse 0.5s ease;
  }
  
  .formatted-date:empty {
    display: none;
  }
  
  .formatted-date-icon {
    font-size: 1.3rem;
  }
  
  .formatted-date-text {
    flex: 1;
  }
  
  /* Make the input height consistent across browsers */
  @supports (-moz-appearance:none) {
    .datetime-picker input {
      height: 3rem;
    }
  }
</style>

<script define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const input = document.getElementById(id);
    const formattedDisplay = document.getElementById(`${id}-formatted`);
    
    if (!input || !formattedDisplay) return;
    
    // Format the date for display
    const formatDate = (dateString) => {
      if (!dateString) return '';
      
      try {
        const date = new Date(dateString);
        
        // Format pattern: DD Month YYYY at HH:MM
        const options = { 
          weekday: 'long',
          day: '2-digit', 
          month: 'long', 
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          hour12: false // Use 24-hour format
        };
        
        // Enhance the format to be more readable
        const formatted = date.toLocaleDateString('en-GB', options);
        // Convert "Monday, 01 January 2023, 13:00" to "Monday, 01 January 2023 at 13:00"
        return formatted.replace(',', '').replace(',', ' at');
      } catch (e) {
        console.error("Error formatting date:", e);
        return '';
      }
    };
    
    // Initial formatting
    updateFormattedDisplay();
    
    // Update on change
    input.addEventListener('change', updateFormattedDisplay);
    
    function updateFormattedDisplay() {
      const dateValue = input.value;
      const textElement = formattedDisplay.querySelector('.formatted-date-text');
      
      if (dateValue && textElement) {
        // Also store ISO format for form processing
        input.dataset.isoValue = new Date(dateValue).toISOString();
        
        // Update the text content
        textElement.textContent = formatDate(dateValue);
        
        // Add a subtle animation to draw attention
        formattedDisplay.classList.add('highlight');
        setTimeout(() => {
          formattedDisplay.classList.remove('highlight');
        }, 500);
      } else if (textElement) {
        textElement.textContent = '';
      }
    }
  });
</script>