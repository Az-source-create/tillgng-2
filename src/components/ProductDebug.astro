---
import { fetchProducts } from '../utils/api.js';

interface Product {
  name: string;
  [key: string]: any;
}

interface ApiResponse {
  list?: Product[];
  [key: string]: any;
}

// Fetch products at build/render time
let products: Product[] = [];
let apiResponse: ApiResponse = {};
let error: string | null = null;

try {
  console.log("Fetching products from NocoDB...");
  
  // Using process.env directly
  const envApiUrl = process.env.NOCODB_API_URL;
  const envApiToken = process.env.NOCODB_API_TOKEN;
  
  console.log("Raw env values:", { 
    NOCODB_API_URL: envApiUrl,
    NOCODB_API_TOKEN: envApiToken ? "Token exists" : "No token found" 
  });
  
  // Using import.meta.env
  const metaApiUrl = import.meta.env.NOCODB_API_URL;
  const metaApiToken = import.meta.env.NOCODB_API_TOKEN;
  
  console.log("import.meta.env values:", { 
    NOCODB_API_URL: metaApiUrl,
    NOCODB_API_TOKEN: metaApiToken ? "Token exists" : "No token found" 
  });
  
  // Check if viewId should be included
  const viewId = 'vwjxbd1e9ujyvbt9'; // From the original URL you provided
  const url = `${metaApiUrl || envApiUrl}?offset=0&limit=25&viewId=${viewId}`;
  
  console.log("Final API URL:", url);
  
  const token = metaApiToken || envApiToken;
  console.log("Using API token:", token ? "Token exists" : "No token found");
  
  if (!url || !token) {
    throw new Error("Missing API URL or token. Check your environment variables.");
  }
  
  const response = await fetch(url, {
    method: 'GET',
    headers: {
      'xc-token': token,
      'Content-Type': 'application/json'
    }
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`API responded with status ${response.status}: ${errorText}`);
  }
  
  apiResponse = await response.json() as ApiResponse;
  console.log("API Response received:", apiResponse);
  products = apiResponse.list || [];
} catch (err: unknown) {
  console.error("Error fetching products:", err);
  error = err instanceof Error ? err.message : String(err);
}
---

<div class="debug-container">
  <h2>NocoDB API Debug</h2>
  
  {error && (
    <div class="error-message">
      <h3>Error:</h3>
      <pre>{error}</pre>
    </div>
  )}
  
  <div class="debug-section">
    <h3>Environment Variables:</h3>
    <pre>NOCODB_API_URL: {import.meta.env.NOCODB_API_URL || 'Not defined'}</pre>
    <pre>NOCODB_API_TOKEN: {import.meta.env.NOCODB_API_TOKEN ? 'Defined (hidden for security)' : 'Not defined'}</pre>
    <pre>All env variables: {JSON.stringify(import.meta.env, null, 2)}</pre>
  </div>
  
  <div class="debug-section">
    <h3>API Response:</h3>
    <pre>{JSON.stringify(apiResponse, null, 2)}</pre>
  </div>
  
  <div class="debug-section">
    <h3>Products:</h3>
    {products.length === 0 ? (
      <p>No products found</p>
    ) : (
      <ul>
        {products.map((product) => (
          <li>{JSON.stringify(product)}</li>
        ))}
      </ul>
    )}
  </div>
</div>

<style>
  .debug-container {
    margin: 2rem;
    padding: 1.5rem;
    border: 1px solid #ccc;
    border-radius: 8px;
    background-color: #f8f9fa;
    font-family: monospace;
  }
  
  .debug-section {
    margin-bottom: 1.5rem;
  }
  
  .error-message {
    background-color: #ffeeee;
    padding: 1rem;
    border-radius: 4px;
    color: #cc0000;
  }
  
  h2 {
    margin-top: 0;
    color: #333;
  }
  
  h3 {
    margin-bottom: 0.5rem;
    color: #555;
  }
  
  pre {
    background-color: #eee;
    padding: 0.5rem;
    border-radius: 4px;
    overflow-x: auto;
    white-space: pre-wrap;
  }
  
  ul {
    padding-left: 1.5rem;
    list-style-type: circle;
  }

  li {
    margin-bottom: 0.5rem;
    word-break: break-all;
  }
</style>
