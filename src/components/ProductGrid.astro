---
import { fetchProducts } from '../utils/api.js';
import Cart from './Cart.astro';

// Get current page and search parameters from URL
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get('page') || '1');
const searchTerm = url.searchParams.get('search') || '';

// Fetch products with pagination and search
let result;
try {
  result = await fetchProducts({ page: currentPage, search: searchTerm });
} catch (error) {
  console.error('Error fetching products:', error);
  result = { 
    products: [], 
    pageInfo: { 
      currentPage, 
      totalPages: 1, 
      totalItems: 0, 
      hasNextPage: false,
      hasPreviousPage: currentPage > 1 
    },
    error: error.message || 'Failed to load products'
  };
}
const { products, pageInfo } = result;

// Process images server-side for each product
const processedProducts = products.map(product => {
  try {
    // Initialize with product data
    const processed = { ...product };
    
    // Add a processed image URL for each product (default placeholder)
    processed.imageUrl = '/placeholder-image.png'; 
    
    // Look specifically for signedUrl in Produktbilder[0].thumbnails.card_cover
    if (product.Produktbilder && 
        Array.isArray(product.Produktbilder) && 
        product.Produktbilder.length > 0 && 
        product.Produktbilder[0].thumbnails &&
        product.Produktbilder[0].thumbnails.card_cover && 
        product.Produktbilder[0].thumbnails.card_cover.signedUrl) {
      
      processed.imageUrl = product.Produktbilder[0].thumbnails.card_cover.signedUrl;
    }
    // Fallback to top-level signedUrl
    else if (product.signedUrl) {
      processed.imageUrl = product.signedUrl;
    }
    // Fallback to top-level card_cover.signedUrl
    else if (product.card_cover && product.card_cover.signedUrl) {
      processed.imageUrl = product.card_cover.signedUrl;
    }
    // Fallback: placeholder
    else {
      processed.imageUrl = 'https://placehold.co/600x400?text=' + encodeURIComponent(product.Produkt || 'Product');
    }
    
    // Ensure product has a name
    if (!processed.Produkt) {
      processed.Produkt = 'Unnamed Product';
    }
    
    // Ensure product has an ID
    if (!processed.Id && !processed.id) {
      processed.id = 'unknown-' + Math.random().toString(36).substring(2, 10);
    }
    
    // If no availability information, provide a default
    if (!processed.availability) {
      const totalQty = parseInt(product['Totalantal'] || product['TotalAntal'] || 0);
      const availableQty = parseInt(product['Antal tillgängliga'] || product['Antal tillgangliga'] || 0);
      
      processed.availability = {
        total: totalQty || 0,
        booked: 0,
        available: availableQty || 0,
        nextAvailable: null
      };
    }
    
    return processed;
  } catch (error) {
    console.error('Error processing product:', error);
    // Return a minimal valid product to avoid UI issues
    return {
      id: 'error-' + Math.random().toString(36).substring(2, 10),
      Produkt: 'Error Loading Product',
      imageUrl: 'https://placehold.co/600x400?text=Error+Loading',
      availability: {
        total: 0,
        booked: 0,
        available: 0,
        nextAvailable: null
      }
    };
  }
});

// Helper function to generate page URLs
function getPageUrl(page) {
  const newUrl = new URL(Astro.request.url);
  newUrl.searchParams.set('page', page.toString());
  // Preserve search parameter if it exists
  if (searchTerm) {
    newUrl.searchParams.set('search', searchTerm);
  }
  return newUrl.pathname + newUrl.search;
}
---

<script>
  // This script runs in the browser
  
  document.addEventListener('DOMContentLoaded', async () => {
    // Dynamically import to avoid client/server mismatch
    const { initBookingSystem, saveBooking, getBookingsForProduct } = await import('../utils/api.js');
    // Parse the product data
    const dataElement = document.getElementById('api-data');
    if (dataElement && dataElement.dataset.products) {
      try {
        const products = JSON.parse(dataElement.dataset.products);
        
        // Initialize booking state
        let booking = initBookingSystem();
        // Use the global function from Cart if available
        if (window.updateBookingCounter) {
          window.updateBookingCounter(booking);
        }
        
        // Client-side fetch for return dates for products that don't have them yet
        const loadingElements = document.querySelectorAll('.next-return-indicator.loading');
        if (loadingElements.length > 0) {
          console.log(`Found ${loadingElements.length} products with pending return dates`);
          
          loadingElements.forEach(async (element) => {
            try {
              // Find the product card this loading indicator belongs to
              const productCard = element.closest('.product-card');
              if (!productCard) return;
              
              // Get product ID from the button in the card
              const addButton = productCard.querySelector('.add-to-booking');
              if (!addButton) return;
              
              const productId = addButton.dataset.productId;
              const productName = addButton.dataset.productName;
              
              if (!productId) return;
              
              console.log(`Fetching return dates for ${productName} (${productId})`);
              
              // Try to fetch bookings for this product
              const bookingsDetails = await getBookingsForProduct(productId);
              
              if (bookingsDetails && bookingsDetails.length > 0) {
                console.log(`Found ${bookingsDetails.length} bookings for ${productName}`);
                
                // Process bookings to find future return dates
                const futureReturns = [];
                const now = new Date();
                
                bookingsDetails.forEach(booking => {
                  try {
                    // Get return date from booking
                    const returnDateField = 
                      booking['Return date-time'] || 
                      booking['ReturnDateTime'] || 
                      booking['returnDateTime'] || 
                      booking['Return datetime'] || 
                      booking['return_date'];
                    
                    if (returnDateField) {
                      // Parse the return date
                      let returnDate;
                      if (typeof returnDateField === 'string') {
                        returnDate = new Date(returnDateField);
                      } else if (returnDateField && returnDateField.value) {
                        returnDate = new Date(returnDateField.value);
                      }
                      
                      if (returnDate && returnDate > now) {
                        // Get quantity
                        const quantityField = booking['Quantity'] || booking['quantity'] || booking['Antal'] || 1;
                        const quantity = parseInt(quantityField) || 1;
                        
                        // Format the date nicely
                        const formattedDate = returnDate.toLocaleString('sv-SE', {
                          day: '2-digit',
                          month: 'long',
                          year: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit',
                          timeZone: 'Europe/Stockholm'
                        });
                        
                        futureReturns.push({
                          returnDate,
                          formattedDate,
                          quantity
                        });
                      }
                    }
                  } catch (err) {
                    console.error('Error processing booking:', err);
                  }
                });
                
                // If we found future returns, update the UI
                if (futureReturns.length > 0) {
                  // Sort by earliest return date
                  futureReturns.sort((a, b) => a.returnDate - b.returnDate);
                  
                  const nextReturn = futureReturns[0];
                  const formattedDate = nextReturn.formattedDate;
                  const returningQty = nextReturn.quantity;
                  
                  // Update the loading indicator with the return date
                  element.innerHTML = `
                    Will be available: ${returningQty} ${returningQty === 1 ? 'item' : 'items'} on ${formattedDate}
                  `;
                  element.classList.remove('loading');
                  
                  // Update the button text and data attributes
                  if (addButton) {
                    addButton.textContent = 'Book from the date it becomes available';
                    addButton.dataset.nextAvailable = formattedDate;
                    addButton.dataset.returningQuantity = returningQty;
                  }
                  
                  // Also update the image overlay if exists
                  const overlay = productCard.querySelector('.checking-overlay, .unavailable-overlay');
                  if (overlay) {
                    overlay.className = 'return-info-overlay';
                    overlay.innerHTML = `
                      <div class="return-info-message">
                        <span class="unavailable-text">Bokad</span>
                        <span class="return-date-text">
                          ${returningQty} ${returningQty === 1 ? 'exemplar' : 'exemplar'} tillgänglig från: ${formattedDate}
                        </span>
                      </div>
                    `;
                  }
                } else {
                  // No future return dates found
                  element.innerHTML = 'Currently unavailable with no return date';
                  element.classList.remove('loading');
                  element.classList.add('unavailable');
                  
                  // Update the overlay to show proper "no return date" message
                  const overlay = productCard.querySelector('.checking-overlay');
                  if (overlay) {
                    overlay.className = 'unavailable-overlay';
                    overlay.innerHTML = `
                      <div class="unavailable-message">
                        <span class="unavailable-text">Currently Booked</span>
                        <span class="next-available-text">No return date available</span>
                      </div>
                    `;
                  }
                }
              } else {
                // No bookings found
                element.innerHTML = 'Currently unavailable with no return date';
                element.classList.remove('loading');
                element.classList.add('unavailable');
                
                // Update the overlay to show proper "no return date" message
                const overlay = productCard.querySelector('.checking-overlay');
                if (overlay) {
                  overlay.className = 'unavailable-overlay';
                  overlay.innerHTML = `
                    <div class="unavailable-message">
                      <span class="unavailable-text">Currently Booked</span>
                      <span class="next-available-text">No return date available</span>
                    </div>
                  `;
                }
              }
            } catch (err) {
              console.error('Error fetching bookings:', err);
              element.innerHTML = `Error loading return dates: ${err.message}`;
              element.classList.remove('loading');
              element.classList.add('error');
              
              // Update the overlay to show proper error message
              const overlay = productCard.querySelector('.checking-overlay');
              if (overlay) {
                overlay.className = 'unavailable-overlay';
                overlay.innerHTML = `
                  <div class="unavailable-message">
                    <span class="unavailable-text">Currently Booked</span>
                    <span class="next-available-text">Error loading return dates</span>
                  </div>
                `;
              }
            }
          });
        }
        
        // Set up event listeners for all "Add to Booking" buttons
        document.querySelectorAll('.add-to-booking').forEach(button => {
          button.addEventListener('click', (e) => {
            const productId = e.target.dataset.productId;
            const productName = e.target.dataset.productName;
            const available = e.target.dataset.available;
            const totalQuantity = e.target.dataset.totalQuantity;
            const nextAvailable = e.target.dataset.nextAvailable;
            const allProductInfo = JSON.parse(e.target.dataset.allProductInfo);
            
            // Check if product is currently booked but available in future
            const isCurrentlyBooked = e.target.closest('.product-card').classList.contains('product-unavailable');
            const returningQuantity = parseInt(e.target.dataset.returningQuantity) || 0;
            
            if (isCurrentlyBooked && nextAvailable) {
              // Show a message about future availability when adding a booked item
              const qtyText = returningQuantity === 1 ? '1 item' : `${returningQuantity} items`;
              if (window.showBookingFeedback) {
                window.showBookingFeedback(
                  `${productName} added! Note: ${qtyText} returning on ${nextAvailable}. ` +
                  `Please select a pickup date after this time.`, 
                  8000 // Show for longer (8 seconds)
                );
              }
            } else if (isCurrentlyBooked) {
              // This shouldn't happen as the button should be disabled, but just in case
              if (window.showBookingFeedback) {
                window.showBookingFeedback(
                  `Sorry, ${productName} is currently unavailable with no known return date.`,
                  4000
                );
              }
              // Don't proceed with adding the item
              return;
            } else {
              // Standard feedback for available items
              if (window.showBookingFeedback) {
                window.showBookingFeedback(`${productName} added to your booking!`);
              }
            }
            
            // Find the product in the booking or add it
            const existingItem = booking.items.find(item => item.id === productId);
            
            if (existingItem) {
              existingItem.quantity += 1;
            } else {
                booking.items.push({
                id: productId,
                name: productName,
                quantity: 1,
                available: available || null,
                totalQuantity: totalQuantity || null,
                nextAvailable: nextAvailable || null,
                returningQuantity: returningQuantity || 0,
                'Försäkringsavgift': allProductInfo['Försäkringsavgift'],
                'Totalhyrkostnad per dag': allProductInfo['Totalhyrkostnad per dag'],
                'Hyrkostnad per dag': allProductInfo['Hyrkostnad per dag']
              });
            }
            
            booking.totalCount += 1;
            
            // Save booking to localStorage
            saveBooking(booking);
            
            // Update UI using the global functions from Cart
            if (window.updateBookingCounter) {
              window.updateBookingCounter(booking);
            }
          });
        });
      } catch (err) {
        console.error('Error parsing product data:', err);
      }
    }
  });
</script>

<!-- Hidden element to store the products data for client-side booking operations -->
<div id="api-data" 
  data-products={JSON.stringify(processedProducts)}
  style="display: none;"></div>

<div class="product-grid-container">
  <h1>Navet Tillgång</h1>

  <h2>
    Välkommen! :) Här kan du hyra/låna utrustning från Navet i Sege Park. 
    Ni kan ha tillgång till verktyg, spel, städredskap, friluftsutrustning, prylar för barn, sportutrustning, 
    projektor, stor högtalare, kreativa redskap, symaskin och massa annat. 
    Utforska och sök!
  </h2>
  
  <div class="sticky-header">
    <Cart />
    
    <form class="search-container" action="/" method="get">
      <input
        type="text"
        id="product-search"
        name="search"
        placeholder="Sök produkter..."
        class="search-input"
        value={searchTerm}
      />
      <button type="submit" class="search-button">Sök</button>
    </form>
    
    {searchTerm && (
      <div class="search-results-header">
        <p>
          {products.length === 0 
            ? `No products found for "${searchTerm}"` 
            : `Found ${pageInfo.totalItems} product${pageInfo.totalItems !== 1 ? 's' : ''} for "${searchTerm}"`}
        </p>
        <a href="/" class="clear-search-button">Clear Search</a>
      </div>
    )}
  </div>
  
  {processedProducts.length === 0 ? (
    <div class="loading-message">
      <p>
        {searchTerm 
          ? `No products found matching "${searchTerm}"` 
          : result.error
            ? `Error loading products: ${result.error}`
            : 'Loading products...'}
      </p>
      {result.error && (
        <button class="retry-button" onclick="window.location.reload()">
          Retry
        </button>
      )}
    </div>
  ) : (
    <div class="product-grid">
      {processedProducts.map((product) => (
        <div class={`product-card box ${product.availability && product.availability.available <= 0 ? 'product-unavailable' : ''}`}>
          <div class="product-image-container">
            {product.availability && product.availability.available <= 0 ? (
              product.availability.nextAvailable ? (
                <div class="return-info-overlay">
                  <div class="return-info-message">
                    <span class="unavailable-text">Bokad</span>
                    <span class="return-date-text">
                      {product.availability.returningQuantity} {product.availability.returningQuantity === 1 ? 'exemplar' : 'exemplar'} tillgänglig från: {product.availability.nextAvailable}
                    </span>
                  </div>
                </div>
              ) : (
                <div class="checking-overlay">
                  <div class="unavailable-message">
                    <span class="unavailable-text">Bokad</span>
                    <span class="next-available-text">Checking return dates...</span>
                  </div>
                </div>
              )
            ) : null}
            <img 
              src={product.imageUrl} 
              alt={`Image of ${product.Produkt}`}
              class="product-image"
              loading="lazy"
              onerror="this.onerror=null; this.src='https://via.placeholder.com/300x200?text=No+Image'; console.log('Image failed to load:', this.src);"
            />
          </div>
          <h2>{product.Produkt}</h2>
          <div class="product-availability">
            {product.availability && (
              <div class="availability-container">
                <span class={`availability-indicator ${product.availability.available <= 0 ? 'unavailable' : 'available'}`}>
                  {product.availability.available > 0 ? 
                    `Available: ${product.availability.available} of ${product.availability.total}` :
                    `Currently booked: 0 of ${product.availability.total} available`
                  }
                </span>
                
                {product.availability.hasBookingError && (
                  <span class="next-return-indicator error">
                    <span class="error-icon">⚠️</span> API Error: {product.availability.error || "Failed to fetch booking data"}
                  </span>
                )}
                
                {product.availability.hasOverdueReturns && (
                  <span class="next-return-indicator overdue">
                    <span class="overdue-warning">⚠️ Overdue:</span> {product.availability.overdueQuantity} {product.availability.overdueQuantity === 1 ? 'item' : 'items'} since {product.availability.overdueDate} 
                    <span class="overdue-days">({product.availability.daysOverdue} {product.availability.daysOverdue === 1 ? 'day' : 'days'} late)</span>
                  </span>
                )}
                
                {product.availability.nextAvailable && product.availability.available > 0 && (
                  <span class="next-return-indicator">
                    Next return: {product.availability.returningQuantity} {product.availability.returningQuantity === 1 ? 'item' : 'items'} on {product.availability.nextAvailable}
                  </span>
                )}
                
                {product.availability.available <= 0 && !product.availability.nextAvailable && !product.availability.hasOverdueReturns && !product.availability.hasBookingError && (
                  <span class="next-return-indicator loading">
                    <span class="loading-icon">⌛</span> Checking return dates...
                  </span>
                )}
              </div>
            )}
          </div>
          <button 
            class="add-to-booking"
            data-all-product-info={JSON.stringify(product)}
            data-product-id={product.Id || product.id}
            data-product-name={product.Produkt}
            data-available={product.availability ? product.availability.available : ''}
            data-total-quantity={product.availability ? product.availability.total : ''}
            data-next-available={product.availability && product.availability.nextAvailable ? product.availability.nextAvailable : ''}
            data-returning-quantity={product.availability && product.availability.returningQuantity ? product.availability.returningQuantity : 0}
            disabled={false}> {/* Allow booking even for currently unavailable items */}
            {product.availability && product.availability.available <= 0 && product.availability.nextAvailable
              ? 'Boka från datum produkten blir tillgänglig'
              : 'Lägg till bokningen'}
          </button>
        </div>
      ))}
    </div>
  )}
  
  {/* Pagination controls */}
  {pageInfo.totalPages > 1 && (
    <div class="pagination">
      <div class="pagination-info">
        Page {pageInfo.currentPage} of {pageInfo.totalPages} 
        ({pageInfo.totalItems} products)
      </div>
      
      <div class="pagination-controls">
        {/* Previous page button */}
        {pageInfo.hasPreviousPage ? (
          <a href={getPageUrl(pageInfo.currentPage - 1)} class="pagination-button">
            &laquo; Previous
          </a>
        ) : (
          <span class="pagination-button disabled">&laquo; Previous</span>
        )}
        
        {/* Page numbers */}
        <div class="pagination-pages">
          {/* First page */}
          {pageInfo.currentPage > 2 && (
            <a href={getPageUrl(1)} class="pagination-page">1</a>
          )}
          
          {/* Ellipsis if needed */}
          {pageInfo.currentPage > 3 && (
            <span class="pagination-ellipsis">...</span>
          )}
          
          {/* Page before current */}
          {pageInfo.currentPage > 1 && (
            <a href={getPageUrl(pageInfo.currentPage - 1)} class="pagination-page">
              {pageInfo.currentPage - 1}
            </a>
          )}
          
          {/* Current page */}
          <span class="pagination-page current">{pageInfo.currentPage}</span>
          
          {/* Page after current */}
          {pageInfo.currentPage < pageInfo.totalPages && (
            <a href={getPageUrl(pageInfo.currentPage + 1)} class="pagination-page">
              {pageInfo.currentPage + 1}
            </a>
          )}
          
          {/* Ellipsis if needed */}
          {pageInfo.currentPage < pageInfo.totalPages - 2 && (
            <span class="pagination-ellipsis">...</span>
          )}
          
          {/* Last page */}
          {pageInfo.currentPage < pageInfo.totalPages - 1 && (
            <a href={getPageUrl(pageInfo.totalPages)} class="pagination-page">
              {pageInfo.totalPages}
            </a>
          )}
        </div>
        
        {/* Next page button */}
        {pageInfo.hasNextPage ? (
          <a href={getPageUrl(pageInfo.currentPage + 1)} class="pagination-button">
            Next &raquo;
          </a>
        ) : (
          <span class="pagination-button disabled">Next &raquo;</span>
        )}
      </div>
    </div>
  )}
</div>

<style>
  .product-grid-container {
    padding: 2rem 1rem;
    max-width: 400px;
    margin: 0 auto;
  }
  
  .sticky-header {
    position: sticky;
    top: 0;
    z-index: 100;
    background-color: white;
    padding-top: 1rem;
    padding-bottom: 1rem;
    margin-bottom: 1rem;
  }
  
  .search-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .search-input {
    flex-grow: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    background-color: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: all 0.2s ease;
  }
  
  .search-input:focus {
    outline: none;
    border-color: #3245ff;
    box-shadow: 0 2px 8px rgba(50, 69, 255, 0.2);
  }
  
  .search-button {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s, transform 0.1s;
  }
  
  .search-button:hover {
    opacity: 0.9;
  }
  
  .search-button:active {
    transform: scale(0.98);
  }
  
  .search-results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 0.75rem 1rem;
    background-color: #f9fafb;
    border-radius: 8px;
  }
  
  .search-results-header p {
    margin: 0;
    color: #4b5563;
  }
  
  .clear-search-button {
    padding: 0.5rem 1rem;
    background-color: #f3f4f6;
    color: #4b5563;
    border-radius: 6px;
    text-decoration: none;
    font-size: 0.875rem;
    transition: background-color 0.2s;
  }
  
  .clear-search-button:hover {
    background-color: #e5e7eb;
  }
  
  h1 {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .product-card {
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 16px;
    border: 1px solid rgba(255, 255, 255, 0.8);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s, box-shadow 0.2s;
    display: flex;
    flex-direction: column;
  }

  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  }

  .product-image-container {
    width: 100%;
    height: 200px;
    margin-bottom: 1rem;
    overflow: hidden;
    border-radius: 8px;
    background-color: #f3f4f6;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .product-card:hover .product-image {
    transform: scale(1.05);
  }
  
  /* Product availability styling */
  .product-image-container {
    position: relative; /* Always make it relative for overlay positioning */
  }
  
  .product-unavailable .product-image-container {
    opacity: 0.9;
  }
  
  .unavailable-overlay, .checking-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    border-radius: 8px;
  }
  
  .checking-overlay {
    background-color: rgba(0, 0, 0, 0.4);
  }
  
  .unavailable-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    text-align: center;
  }
  
  .unavailable-text {
    color: white;
    font-weight: 700;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.8);
    background: rgba(0, 0, 0, 0.4);
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
  }
  
  .next-available-text {
    color: white;
    font-size: 0.9rem;
    background-color: rgba(0, 0, 0, 0.5);
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    font-weight: 500;
  }
  
  .return-info-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    border-radius: 8px;
    padding: 0.5rem;
  }
  
  .return-info-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    text-align: center;
  }
  
  .return-date-text {
    color: white;
    font-size: 1.1rem;
    font-weight: 700;
    padding: 0.3rem 0.8rem;
    text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.8);
    background: rgba(0, 0, 0, 0.4);
    border-radius: 4px;
    margin-bottom: 0.5rem;
  }
  
  .product-availability {
    margin: 0.5rem 0;
    display: flex;
    justify-content: center;
  }
  
  .availability-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.3rem;
    width: 100%;
  }
  
  .availability-indicator {
    font-size: 0.9rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    display: inline-block;
  }
  
  .availability-indicator.available {
    background-color: rgba(16, 185, 129, 0.1);
    color: rgb(16, 185, 129);
  }
  
  .availability-indicator.unavailable {
    background-color: rgba(239, 68, 68, 0.1);
    color: rgb(239, 68, 68);
  }
  
  .next-return-indicator {
    font-size: 0.8rem;
    color: #6b7280;
    padding: 0.15rem 0.4rem;
    background-color: #f3f4f6;
    border-radius: 4px;
  }
  
  .product-unavailable .add-to-booking:not([disabled]) {
    background: #f7f0ff;
    color: #6c2bd9;
    border: 1px solid #8b5cf6;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .product-unavailable .add-to-booking:not([disabled]):hover {
    background: #f3e8ff;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(139, 92, 246, 0.2);
  }
  
  /* Style button differently for future booking */
  button.add-to-booking:contains("Book from the date") {
    background: #f7f0ff;
    color: #6c2bd9;
    border: 1px solid #8b5cf6;
    cursor: pointer;
    font-size: 0.9rem;
    box-shadow: 0 2px 4px rgba(139, 92, 246, 0.2);
  }
  
  button.add-to-booking:contains("Book from the date"):hover {
    background: #f3e8ff;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(139, 92, 246, 0.3);
  }
  
  .next-return-indicator.unavailable {
    background-color: rgba(239, 68, 68, 0.1);
    color: rgb(239, 68, 68);
  }
  
  .next-return-indicator.overdue {
    background-color: rgba(239, 139, 24, 0.2);
    color: rgb(203, 65, 11);
    font-weight: 500;
    padding: 0.4rem 0.6rem;
    border-left: 3px solid rgb(220, 38, 38);
  }
  
  .overdue-warning {
    font-weight: 700;
    color: rgb(220, 38, 38);
  }
  
  .overdue-days {
    font-style: italic;
    font-size: 0.85em;
    opacity: 0.9;
  }
  
  .next-return-indicator.error {
    background-color: rgba(239, 68, 68, 0.15);
    color: rgb(185, 28, 28);
    font-weight: 500;
    padding: 0.4rem 0.6rem;
    border-left: 3px solid rgb(220, 38, 38);
  }
  
  .error-icon, .loading-icon {
    margin-right: 0.3rem;
  }
  
  .next-return-indicator.loading {
    background-color: rgba(59, 130, 246, 0.15);
    color: rgb(37, 99, 235);
    font-weight: 500;
    padding: 0.4rem 0.6rem;
    border-left: 3px solid rgb(59, 130, 246);
    animation: pulse 1.5s infinite ease-in-out;
  }
  
  @keyframes pulse {
    0% { opacity: 0.7; }
    50% { opacity: 1; }
    100% { opacity: 0.7; }
  }
  
  .product-debug {
    background: #f0f9ff;
    padding: 8px;
    margin-bottom: 10px;
    border-radius: 4px;
    font-size: 12px;
    overflow-wrap: break-word;
    word-break: break-all;
    max-height: 150px;
    overflow-y: auto;
  }
  
  .product-card h2 {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    color: #111827;
  }

  .loading-message {
    text-align: center;
    padding: 2rem;
    color: #4b5563;
    font-size: 1.2rem;
  }
  
  .retry-button {
    margin-top: 1rem;
    padding: 0.8rem 1.5rem;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s, transform 0.1s;
    font-size: 1rem;
    box-shadow: 0 4px 6px rgba(50, 69, 255, 0.2);
  }
  
  .retry-button:hover {
    opacity: 0.9;
    transform: translateY(-2px);
    box-shadow: 0 6px 8px rgba(50, 69, 255, 0.3);
  }
  
  .loading-message p {
    margin-bottom: 1.5rem;
    font-size: 1.2rem;
  }

  /* Add to booking button */
  .add-to-booking {
    margin-top: auto;
    padding: 0.6rem 1rem;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s, transform 0.1s;
  }

  .add-to-booking:hover {
    opacity: 0.9;
  }

  .add-to-booking:active {
    transform: scale(0.98);
  }

  /* Booking summary bar */
  #booking-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    position: relative;
  }

  #booking-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: 500;
    min-width: 150px;
    position: relative;
  }

  #booking-counter {
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    color: white;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    text-align: center;
    line-height: 32px;
    font-size: 1rem;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    /* Always maintain space but show empty initially */
    visibility: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  /* Animation when items are added */
  #booking-counter.pulse {
    animation: pulse 0.5s ease;
  }
  
  .booking-label {
    font-size: 1rem;
    font-weight: 500;
    color: #4b5563;
    letter-spacing: -0.01em;
    visibility: hidden; /* Hide initially, but preserve space */
  }

  .view-booking-btn {
    padding: 0.5rem 1rem;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: opacity 0.2s;
    /* Always maintain space but hide initially */
    visibility: hidden;
    display: block;
  }
  
  .view-booking-btn:hover {
    opacity: 0.9;
  }

  #booking-feedback {
    display: none;
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: #10b981;
    color: white;
    padding: 0.75rem 1.25rem;
    border-radius: 8px;
    font-size: 0.95rem;
    font-weight: 500;
    animation: fadeIn 0.3s;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.15); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25); }
    100% { transform: scale(1); }
  }

  /* Pagination styles */
  .pagination {
    margin-top: 2rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  
  .pagination-info {
    font-size: 0.9rem;
    color: #6b7280;
  }
  
  .pagination-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  
  .pagination-pages {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }
  
  .pagination-button, .pagination-page {
    padding: 0.5rem 1rem;
    border-radius: 8px;
    text-decoration: none;
    color: #111827;
    background: #f3f4f6;
    font-weight: 500;
    transition: background-color 0.2s, color 0.2s;
  }
  
  .pagination-page {
    min-width: 2.5rem;
    text-align: center;
    padding: 0.5rem;
  }
  
  .pagination-button:hover, .pagination-page:hover {
    background: #e5e7eb;
  }
  
  .pagination-page.current {
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    color: white;
  }
  
  .pagination-button.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: #f3f4f6;
  }
  
  .pagination-ellipsis {
    padding: 0 0.25rem;
    color: #6b7280;
  }

</style>
