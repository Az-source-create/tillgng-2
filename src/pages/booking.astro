---
import Layout from '../layouts/Layout.astro';
import DateTimePicker from '../components/DateTimePicker.astro';
---


<Layout>
  <div class="booking-page">
    <div class="booking-header">
      <div class="header-with-home">
        <a href="/" class="home-icon" aria-label="Go to home page">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
            <polyline points="9 22 9 12 15 12 15 22"></polyline>
          </svg>
        </a>
        <h1>Your Booking</h1>
      </div>
    </div>
    
    <div class="booking-container">
      <div id="booking-items">
        <!-- Items will be loaded here -->
      </div>
      
      <div id="empty-booking" style="display: none;">
        <p>Your booking is empty.</p>
        <a href="/" class="back-button">Browse Products</a>
      </div>
      
      <div id="booking-actions" style="display: none;">
        <button id="clear-booking" class="danger-button">Rensa varukorgen</button>
        <a href="/" class="back-button">Tillbaka till produkter</a>
      </div>
      
      <div id="personal-info-form" style="display: none;">
        <h2>Regler för lån av utrustning</h2>
        <div class="rules-section">
          <ul>
            <li>Eventuell betalning sker på plats.</li>
            <li>Lånad pryl/utrustning får inte lämnas vidare till annan låntagare.</li>
            <li>Låntagaren är ansvarig för att all utrustning sköts och används på ett korrekt sätt.</li>
            <li>Prylar/utrustning skall lämnas tillbaka rengjorda och i det skick de lånats ut i.</li>
            <li>Eventuella skador ska anmälas vid återlämning. Motsvarande kostnad för skador debiteras låntagaren.</li>
            <li>Drevet ansvarar inte för skador under utlånings- uthyrningsperioden, vare sig sak- eller personskador.</li>
            <li>
                Vill du förlänga låneperioden ska det kommuniceras innan perioden löper ut. (OBS! kontoret har begränsad öppettid/telefontid. 
                Se 
                <a href="https://segepark.com" target="_blank" rel="noopener noreferrer">
                  SegePark.com
                </a>)
            </li>
            <li>Vid försening av återlämning utan kommunikation debiteras en avgift på 100 kr per försenad dag.</li>
          </ul>
        </div>
        
        <h2>Scheduling</h2>
        <div class="opening-hours-notice">
          <p>
            Våra öppettider kan hittas på 
            <a href="https://segepark.com" target="_blank" rel="noopener noreferrer">
              SegePark.com
            </a>. 
            Säkerställ att ditt upphämtnings- och återlämningsdatum och tid matchar vår öppettider.
            Maximal uthyrningsperioud är 7 dagar. Kontaktinfo finns på SegePark.com.
          </p>
        </div>
        <form id="booking-form">
          <div class="form-dates">
            <div class="form-group">
              <DateTimePicker 
                id="pickupDateTime" 
                name="pickupDateTime"
                label="Upphämtningsdatum och tid"
                required={true}
                min={new Date().toISOString().slice(0, 16)} // Current date-time as minimum
              />
            </div>
            
            <div class="form-group">
              <DateTimePicker 
                id="returnDateTime" 
                name="returnDateTime"
                label="Återlämningsdatum och tid"
                required={true}
                initialDate={new Date(new Date().getTime() + 4 * 60 * 60 * 1000)}
                min={new Date().toISOString().slice(0, 16)} // Current date-time as minimum
              />
            </div>
          </div>
          
          <h2>Din information</h2>
          <div class="form-group">
            <label for="fullName">Namn</label>
            <input type="text" id="fullName" name="fullName" required>
          </div>
          
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" required></textarea>
          </div>
          
          <div class="form-group">
            <label for="notes">Notes/Anteckningar för nåt mer du vill säga</label>
            <textarea id="notes" name="notes"></textarea>
          </div>
          
          <button type="submit" class="primary-button">Skicka in bokningen</button>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Dynamically import to avoid client/server mismatch
    const { initBookingSystem, saveBooking, submitBooking } = await import('../utils/api.js');
    // Get booking from localStorage
    const booking = initBookingSystem();
    const bookingItemsContainer = document.getElementById('booking-items');
    const emptyBookingMessage = document.getElementById('empty-booking');
    const bookingActions = document.getElementById('booking-actions');
    
    // Display booking items or empty message
    if (booking.items.length === 0) {
      emptyBookingMessage.style.display = 'block';
    } else {
      // Create booking list
      const bookingList = document.createElement('div');
      bookingList.className = 'booking-list';
      
      booking.items.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'booking-item';
        
        // Common HTML content for all items
        const baseContent = `
          <div style="display: flex; flex-direction: column; align-items: center; gap: 1rem; width: 100%; max-width: 300px; margin: auto; margin-bottom: 2rem;">
            <h3 style="margin: 0; font-size: 1.3rem; color: #111827; text-align: center; font-weight: 600;">${item.name}</h3>
            <h3 style="margin: 0; font-size: 1.3rem; color: #111827; text-align: center;">${item.available} av ${item.totalQuantity} tillgängliga</h3>
            ${item.nextAvailable ? `
              <h3 style="margin: 0; font-size: 1rem; color: #111827; text-align: center;">${item.returningQuantity} exemplar återlämnas den ${item.nextAvailable}</h3>
            ` : ''}
            <h4 style="margin: 0; font-size: 1rem; color: #111827; text-align: center; font-weight: 600;">Rekommenderad betalning är ${item["Totalhyrkostnad per dag"]} kr per exemplar per dag av vilket ${item['Försäkringsavgift']} kr är försäkringsavgift och resten går till områdesföreningen i Sege Park. Eventuell betalning sker på plats.</h4>
            <div style="display: flex; align-items: center; justify-content: center; gap: 1rem; margin: 15px 0;">
              <button class="quantity-btn decrease" data-id="${item.id}" style="width: 50px; height: 50px; border-radius: 50%; background: #fff0f0; color: #cc0000; border: 2px solid #ff3333; cursor: pointer; font-weight: bold; display: flex; align-items: center; justify-content: center; font-size: 1.8rem; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); margin: 0 8px;">-</button>
              <span style="min-width: 40px; text-align: center; font-weight: 600; font-size: 1.5rem; margin: 0 10px;">${item.quantity}</span>
              <button class="quantity-btn increase" data-id="${item.id}" style="width: 50px; height: 50px; border-radius: 50%; background: #dcf5ff; color: #0066cc; border: 2px solid #0099ff; cursor: pointer; font-weight: bold; display: flex; align-items: center; justify-content: center; font-size: 1.8rem; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); margin: 0 8px;">+</button>
            </div>
            <button class="remove-item" data-id="${item.id}" style="background: #fee2e2; border: 1px solid #ef4444; border-radius: 8px; color: #ef4444; cursor: pointer; font-weight: 600; padding: 10px 16px; font-size: 1rem; box-shadow: 0 2px 4px rgba(239, 68, 68, 0.15); margin-top: 5px; width: auto;">Remove Item</button>
          </div>
        `;

        itemElement.innerHTML = baseContent;
        bookingList.appendChild(itemElement);
      });
      
      bookingItemsContainer.appendChild(bookingList);
      bookingActions.style.display = 'flex';
      
      // Show the personal info form if there are items in the booking
      const personalInfoForm = document.getElementById('personal-info-form');
      personalInfoForm.style.display = 'block';
      
      // Set up event listeners for quantity buttons
      document.querySelectorAll('.quantity-btn').forEach(button => {
        button.addEventListener('click', e => {
          const id = e.target.dataset.id;
          const isIncrease = e.target.classList.contains('increase');
          const item = booking.items.find(item => item.id === id);
          
          if (item) {
            if (isIncrease) {
              item.quantity += 1;
              booking.totalCount += 1;
            } else if (item.quantity > 1) {
              item.quantity -= 1;
              booking.totalCount -= 1;
            }
            
            // Update UI
            const quantitySpan = e.target.parentElement.querySelector('span');
            quantitySpan.textContent = item.quantity;
            
            // Save updated booking
            saveBooking(booking);
          }
        });
      });
      
      // Set up event listeners for remove buttons
      document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', e => {
          const id = e.target.dataset.id;
          const itemIndex = booking.items.findIndex(item => item.id === id);
          
          if (itemIndex !== -1) {
            // Update total count and remove item
            booking.totalCount -= booking.items[itemIndex].quantity;
            booking.items.splice(itemIndex, 1);
            
            // Remove from UI
            e.target.closest('.booking-item').remove();
            
            // If booking is now empty, show empty message
            if (booking.items.length === 0) {
              bookingList.remove();
              emptyBookingMessage.style.display = 'block';
              bookingActions.style.display = 'none';
              personalInfoForm.style.display = 'none';
            }
            
            // Save updated booking
            saveBooking(booking);
          }
        });
      });
      
      // Set up clear booking button
      document.getElementById('clear-booking').addEventListener('click', () => {
        booking.items = [];
        booking.totalCount = 0;
        
        // Update UI
        bookingList.remove();
        emptyBookingMessage.style.display = 'block';
        bookingActions.style.display = 'none';
        personalInfoForm.style.display = 'none';
        
        // Save empty booking
        saveBooking(booking);
      });
      
      // Date/time wheels are now initialized by the DateTimeWheel component
      // with sensible default values
      
      // Set up form submission
      document.getElementById('booking-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Show loading state
        const submitButton = e.target.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = 'Submitting...';
        
        try {
          // Validate booking has items
          if (booking.items.length === 0) {
            throw new Error('Your booking is empty. Please add items to your booking before submitting.');
          }
          
          // Get date time values directly from the datetime-local inputs (in YYYY-MM-DDT hh:mm format)
          const pickupDateTimeValue = document.getElementById('pickupDateTime').value;
          const returnDateTimeValue = document.getElementById('returnDateTime').value;
          
          // Validate all fields are filled
          if (!pickupDateTimeValue) {
            throw new Error('Please select a pickup date and time.');
          }
          
          if (!returnDateTimeValue) {
            throw new Error('Please select a return date and time.');
          }
          
          // Parse the YYYY-MM-DDThh:mm format and set time zone to Stockholm
          const parseDateTimeString = (dateTimeStr) => {
            // Create a date object that correctly preserves the local time as entered by the user
            const [datePart, timePart] = dateTimeStr.split('T');
            const [year, month, day] = datePart.split('-').map(Number);
            const [hours, minutes] = timePart.split(':').map(Number);
            
            // Create date as specified by user without timezone conversion
            const date = new Date();
            date.setFullYear(year);
            date.setMonth(month - 1); // Months are 0-indexed
            date.setDate(day);
            date.setHours(hours);
            date.setMinutes(minutes);
            date.setSeconds(0);
            date.setMilliseconds(0);
            
            console.log(`Parsed ${dateTimeStr} as local time: ${date.toString()}`);
            
            return date;
          };
          
          // Create Date objects from form values
          const pickupDateTime = parseDateTimeString(pickupDateTimeValue);
          const returnDateTime = parseDateTimeString(returnDateTimeValue);
          
          // Check that pickup date and time are not in the past
          const now = new Date();
          if (pickupDateTime < now) {
            throw new Error('Pickup date and time cannot be in the past.');
          }
          
          // Check that return date is after pickup date
          if (returnDateTime <= pickupDateTime) {
            throw new Error('Return date and time must be after pickup date and time.');
          }
          
          // Check that rental period is not more than 7 days (1 week)
          const rentalDuration = Math.round((returnDateTime - pickupDateTime) / (1000 * 60 * 60 * 24)); // duration in days
          
          if (rentalDuration > 7) {
            throw new Error(`Your rental period is ${rentalDuration} days. You can only borrow items for a maximum of 7 days (1 week) at a time.`);
          }
          
          // Format dates for display in logs (DD-MM-YYYY HH:mm)
          const formatDateTime = (date) => {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            
            const formatted = `${day}-${month}-${year} ${hours}:${minutes}`;
            console.log(`Formatting date ${date.toString()} as: ${formatted}`);
            return formatted;
          };
          
          const pickupFormatted = formatDateTime(pickupDateTime);
          const returnFormatted = formatDateTime(returnDateTime);
          
          // Collect form data
          const formData = {
            // Scheduling information
            pickupDateTime,
            pickupDateTimeFormatted: pickupFormatted,
            returnDateTime,
            returnDateTimeFormatted: returnFormatted,
            
            // Personal information
            fullName: document.getElementById('fullName').value,
            email: document.getElementById('email').value,
            phone: document.getElementById('phone').value,
            address: document.getElementById('address').value,
            notes: document.getElementById('notes').value,
            
            // Booking items
            bookingItems: booking.items
          };
          
          // For development/testing, log the data in detail
          console.log('Submitting booking data:', {
            ...formData,
            pickupRaw: pickupDateTime.toString(),
            returnRaw: returnDateTime.toString(),
            pickupTimestamp: pickupDateTime.getTime(),
            returnTimestamp: returnDateTime.getTime()
          });
          
          // Submit booking to NocoDB
          console.log('Calling submitBooking with form data');
          const result = await submitBooking(formData);
          console.log('Received result from submitBooking:', result);
          
          // Prepare data for the confirmation page
          // Instead of using ISO string which can cause timezone shifts,
          // pass the exact formatted string that was used for the API
          const pickupForConfirmation = pickupFormatted;
          const returnForConfirmation = returnFormatted;
          
          // Encode booking items for URL (including name, quantity, and recommended price info)
          const itemsForURL = booking.items.map(item => ({
            name: item.name,
            quantity: item.quantity,
            recommendedPrice: item["Totalhyrkostnad per dag"],
            insuranceFee: item["Försäkringsavgift"]
          }));
          const encodedItems = encodeURIComponent(JSON.stringify(itemsForURL));
          
          // Clear the booking
          booking.items = [];
          booking.totalCount = 0;
          saveBooking(booking);
          
          // Redirect to confirmation page with booking details
          window.location.href = `/booking-confirmation?name=${encodeURIComponent(formData.fullName)}&email=${encodeURIComponent(formData.email)}&phone=${encodeURIComponent(formData.phone)}&pickup=${encodeURIComponent(pickupForConfirmation)}&return=${encodeURIComponent(returnForConfirmation)}&items=${encodedItems}`;
          
        } catch (error) {
          // Show detailed error message for debugging
          console.error('Submission error details:', error);
          
          // Extract error message and create a more specific user message
          let errorMessage = error.message || 'Unknown error';
          let userMessage = errorMessage;
          
          // Check for common errors and provide better messages
          if (error.message && error.message.includes('date format')) {
            userMessage = 'The date format is incorrect. Please use the date picker to select valid dates in the format DD-MM-YYYY HH:MM.';
          } else if (error.message && error.message.includes('API error')) {
            userMessage = 'There was an issue connecting to our booking system. Please try again or contact support.';
          } else if (error.message && error.message.includes('Failed to submit')) {
            userMessage = 'Failed to submit your booking to our system. This might be due to invalid date formats or other validation issues.';
          }
          
          // Add more detailed error info for debugging
          console.error('Form values:', {
            pickupDateTime: document.getElementById('pickupDateTime')?.value || 'not set',
            returnDateTime: document.getElementById('returnDateTime')?.value || 'not set',
          });
          
          // Create a more user-friendly message
          alert(`Error submitting booking: ${userMessage}\n\nPlease try again or contact support if the problem persists.`);
        } finally {
          // Reset button state
          submitButton.disabled = false;
          submitButton.innerHTML = originalButtonText;
        }
      });
    }
  });
</script>

<style>
  .booking-page {
    padding: 2rem 1rem;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .rules-section {
    background-color: #f9f9f9;
    border-left: 4px solid #3245ff;
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 4px;
  }
  
  .rules-section ul {
    margin: 0;
    padding-left: 1.5rem;
    list-style-type: disc;
  }
  
  .rules-section li {
    margin: 0.5rem 0;
    line-height: 1.5;
    color: #333;
    padding-left: 0.5rem;
    display: list-item;
  }
  
  .rules-section li::marker {
    color: #3245ff;
    font-size: 1.2em;
  }
  
  .opening-hours-notice {
    background-color: #f9f9f9;
    border-left: 4px solid #3245ff;
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 4px;
  }
  
  .opening-hours-notice p {
    margin: 0;
    line-height: 1.5;
    color: #333;
  }
  
  .opening-hours-notice a {
    color: #3245ff;
    font-weight: 600;
    text-decoration: underline;
  }
  
  .booking-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }
  
  .header-with-home {
    display: flex;
    align-items: center;
    gap: 15px;
  }
  
  .home-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.9);
    color: #3245ff;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }
  
  .home-icon:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    background: white;
  }
  
  h1 {
    font-size: 2rem;
    margin: 0;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .booking-container {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 16px;
    border: 1px solid rgba(255, 255, 255, 0.8);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    padding: 2rem;
  }
  
  .booking-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .booking-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2rem;
    border-bottom: 2px solid #eee;
    margin-bottom: 20px;
    background-color: #fafafa;
    border-radius: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }
  
  .booking-item:last-child {
    border-bottom: none;
  }
  
  .item-details {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    width: 100%;
  }
  
  .item-details h3 {
    margin: 0;
    font-size: 1.5rem;
    color: #111827;
    text-align: center;
    font-weight: 700;
  }
  
  .item-quantity {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin: 25px 0;
  }
  
  .quantity-btn {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: #063fb0;
    border: 3px solid #113f9b;
    cursor: pointer;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    transition: all 0.2s ease;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    margin: 0 15px;
  }
  
  .quantity-btn:hover {
    background: #e5e7eb;
    transform: scale(1.1);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
  }
  
  .quantity-btn.increase {
    background: #dcf5ff;
    color: #0066cc;
    border: 3px solid #0099ff;
  }
  
  .quantity-btn.decrease {
    background: #fff0f0;
    color: #cc0000;
    border: 3px solid #ff3333;
  }
  
  .quantity {
    min-width: 60px;
    text-align: center;
    font-weight: 700;
    font-size: 2.2rem;
    margin: 0 20px;
  }
  
  .remove-item {
    background: #fee2e2;
    border: 2px solid #ef4444;
    border-radius: 12px;
    color: #ef4444;
    cursor: pointer;
    font-weight: 700;
    padding: 15px 25px;
    font-size: 1.2rem;
    transition: all 0.2s ease;
    box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);
    margin-top: 10px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .remove-item:hover {
    background: #fecaca;
    transform: translateY(-3px);
    box-shadow: 0 6px 12px rgba(239, 68, 68, 0.4);
  }
  
  #booking-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
    border-top: 1px solid #eee;
    padding-top: 1rem;
  }
  
  .back-button {
    display: inline-block;
    padding: 0.6rem 1.2rem;
    background: #f3f4f6;
    color: #111827;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: background 0.2s;
    text-align: center;
  }
  
  .back-button:hover {
    background: #e5e7eb;
  }
  
  .danger-button {
    padding: 0.6rem 1.2rem;
    background: #fee2e2;
    color: #ef4444;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.2s;
  }
  
  .danger-button:hover {
    background: #fecaca;
  }
  
  /* Personal Info Form Styles */
  #personal-info-form {
    margin-top: 2rem;
    border-top: 1px solid #eee;
    padding-top: 1.5rem;
  }
  
  #personal-info-form h2 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: #111827;
  }
  
  .form-dates {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .form-group {
    margin-bottom: 1.25rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #111827;
  }
  
  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    background: #f9fafb;
    font-size: 1rem;
  }
  
  .form-group textarea {
    min-height: 100px;
    resize: vertical;
  }
  
  .time-format-hint,
  .date-format-hint {
    display: block;
    font-size: 0.8rem;
    color: #6b7280;
  }
  
  /* 24-hour time format styles */
  input[type="time"] {
    font-family: monospace; /* Use monospace font for better alignment */
  }
  
  /* Ensure consistent appearance across browsers */
  input[type="time"]::-webkit-datetime-edit {
    display: inline-block;
  }
  
  /* Time inputs styling */
  input[type="time"] {
    width: 100%;
    padding: 0.75rem;
  }
  
  /* Date input styling */
  input[type="date"] {
    width: 100%;
    padding: 0.75rem;
  }
  
  .primary-button {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: opacity 0.2s;
    margin-top: 1rem;
  }
  
  .primary-button:hover {
    opacity: 0.9;
  }
  
  .primary-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
  
  @media screen and (max-width: 640px) {
    .booking-item {
      flex-direction: column;
      align-items: center;
      gap: 2rem;
      padding: 2rem 1rem;
    }
    
    .item-details {
      width: 100%;
      align-items: center;
      gap: 1.5rem;
    }
    
    .item-quantity {
      width: 100%;
      justify-content: center;
      margin: 15px 0;
    }
    
    .remove-item {
      align-self: center;
      width: 90%;
      padding: 18px 20px;
      text-align: center;
      margin-top: 15px;
      font-size: 1.3rem;
    }
    
    /* Remove the redundant media query override since we're already using column layout */
    
    .form-group input,
    .form-group textarea {
      font-size: 16px; /* Prevent zoom on input focus on mobile */
    }
  }
</style>
